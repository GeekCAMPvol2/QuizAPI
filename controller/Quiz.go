package controller

import (
	"encoding/csv"
	"fmt"
	"log"
	"math/rand"
	"os"
	"serv/config"
	"strconv"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/murasame29/rakutenapi"
)

type ReturnData struct {
	Quiz          string             `json:"quiz"`
	Answer        int                `json:"answer"`
	Images        []rakutenapi.Image `json:"images"`
	AffiliateLink string             `json:"affiliatelink"`
}

func readCsv() [][]string {
	file, err := os.Open("rakuten_genre.csv")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	r := csv.NewReader(file)
	rows, err := r.ReadAll()
	if err != nil {
		log.Fatal(err)
	}

	return rows
}

// 文字列をUint64に変換する
func convertUint(x string) (uint64, error) {
	if len(x) != 0 {
		data, err := strconv.ParseUint(x, 10, 64)
		if err != nil {
			return data, fmt.Errorf("符号なしの整数値のみの入力 :%s", err)
		}
		return data, nil
	} else {
		return 1, nil
	}
}

// ランダムなジャンルIDを返す
func randomGenre() []string {
	rand.Seed(time.Now().UnixNano())
	RakutenGenre := readCsv()
	return RakutenGenre[rand.Intn(len(RakutenGenre)-1)]
}

// 楽天にリクエストする
func rakutenRequest(flag bool, requestData rakutenapi.RakutenSearch, length string) (rakutenapi.AutoGenerated, error) {
	//defer wg.Done()
	var genreId string
	if flag {
		genreId = randomGenre()[0]
	}
	requestData = rakutenapi.RakutenSearch{
		S:        config.InitRequest(length),
		GenreId_: genreId,
	}
	return requestData.Do()

}

// GetQuizされた時の関数
func GetQuiz(c *gin.Context) {
	var (
		randflag bool = false
		//wg       sync.WaitGroup
		hits         int
		responseData []rakutenapi.AutoGenerated
		returnData   []ReturnData
	)
	if len(c.Query("hits")) == 0 {
		hits = 1
	} else {
		h, err := strconv.Atoi(c.Query("hits"))

		hits = h
		if err != nil {
			c.JSON(400, gin.H{
				"message": fmt.Sprintf("wrong argument type :%s", err),
			})
			return
		}
	}

	//整数が入力されたかの確認

	page, err := convertUint(c.Query("page"))

	if err != nil {
		c.JSON(400, gin.H{
			"message": fmt.Sprintf("wrong argument type :%s", err),
		})
		return
	}

	sort, err := convertUint(c.Query("sort"))

	if err != nil {
		c.JSON(400, gin.H{
			"message": fmt.Sprintf("wrong argument type :%s", err),
		})
		return
	}

	genreId := c.Query("genreid")

	requestData := rakutenapi.RakutenSearch{
		Keyword_: c.Query("keyword"),
		Page_:    page,
		Sort_:    sort,
	}

	if len(c.Query("keyword")) == 0 && len(c.Query("genreid")) == 0 {
		randflag = true
	} else {
		requestData = rakutenapi.RakutenSearch{
			GenreId_: genreId,
		}
	}

	//要改善
	for i := 0; i < hits; i += 5 {
		rd, _ := rakutenRequest(randflag, requestData, "1")
		responseData = append(responseData, rd)
		rd, _ = rakutenRequest(randflag, requestData, "2")
		responseData = append(responseData, rd)
		rd, _ = rakutenRequest(randflag, requestData, "3")
		responseData = append(responseData, rd)
		rd, _ = rakutenRequest(randflag, requestData, "4")
		responseData = append(responseData, rd)
		rd, _ = rakutenRequest(randflag, requestData, "5")
		responseData = append(responseData, rd)
	}

	if err != nil {
		c.JSON(400, gin.H{
			"message": fmt.Sprintf("wrong argument type :%s", err),
		})
		return
	}

	for j := 0; j < hits; j++ {
		for i := range responseData[j].Items[0].Item.MediumImageUrls {
			responseData[j].Items[0].Item.MediumImageUrls[i].ImageURL = strings.ReplaceAll(responseData[j].Items[0].Item.MediumImageUrls[i].ImageURL, "?_ex=128x128", "")
		}
		r := ReturnData{
			Quiz:          responseData[j].Items[0].Item.ItemName,
			Answer:        responseData[j].Items[0].Item.ItemPrice,
			Images:        responseData[j].Items[0].Item.MediumImageUrls,
			AffiliateLink: responseData[j].Items[0].Item.AffiliateURL,
		}
		returnData = append(returnData, r)
	}

	c.JSON(200, returnData)
}
