package controller

import (
	"encoding/csv"
	"fmt"
	"log"
	"math/rand"
	"os"
	"serv/config"
	"serv/db"
	"serv/models"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/murasame29/rakutenapi"
)

func readCsv() [][]string {
	file, err := os.Open("rakuten_genre.csv")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	r := csv.NewReader(file)
	rows, err := r.ReadAll()
	if err != nil {
		log.Fatal(err)
	}

	return rows
}

// 文字列をUint64に変換する
func convertUint(x string) (uint64, error) {
	if len(x) != 0 {
		data, err := strconv.ParseUint(x, 10, 64)
		if err != nil {
			return data, fmt.Errorf("符号なしの整数値のみの入力 :%s", err)
		}
		return data, nil
	} else {
		return 1, nil
	}
}

// ランダムなジャンルIDを返す
func randomGenre() []string {
	rand.Seed(time.Now().UnixNano())
	RakutenGenre := readCsv()
	return RakutenGenre[rand.Intn(len(RakutenGenre)-1)]
}

// 楽天にリクエストする
func rakutenRequest(randflag bool, requestData rakutenapi.RakutenSearch, hits int) chan rakutenapi.AutoGenerated {
	concurrency := 4
	limit := make(chan int, concurrency)
	responseDataChan := make(chan rakutenapi.AutoGenerated, hits)
	var wg sync.WaitGroup

	for i := 0; i < hits; i++ {
		wg.Add(1)
		go func(wg *sync.WaitGroup, limit chan int, requestData rakutenapi.RakutenSearch, randflag bool, i int, responseDataChan chan<- rakutenapi.AutoGenerated) {
			defer wg.Done()
			limit <- i

			var genreId string

			if randflag {
				genreId = randomGenre()[0]
			}
			requestData = rakutenapi.RakutenSearch{
				S:        config.InitRequest(strconv.Itoa(<-limit%5 + 1)),
				GenreId_: genreId,
			}

			response, err := requestData.Do()
			if err != nil {
				log.Println(err)
			}
			responseDataChan <- response
		}(&wg, limit, requestData, randflag, i, responseDataChan)

	}

	wg.Wait()
	close(responseDataChan)
	return responseDataChan
}

// GetQuizされた時の関数
func GetQuiz(c *gin.Context) {
	var (
		randflag   bool = false
		hits       int  = 1
		returnData []models.ReturnData
		retflag    bool = false
	)
	if len(c.Query("hits")) == 0 || len(c.Query("hits")) == 1 {
		hits = 1
	} else {
		h, err := strconv.Atoi(c.Query("hits"))

		if h > 10 {
			c.JSON(400, gin.H{
				"message": fmt.Sprintf("そんな一度に大量にリクエストせんといてや:("),
			})
			return
		}
		hits = h
		if err != nil {
			c.JSON(400, gin.H{
				"message": fmt.Sprintf("wrong argument type :%s", err),
			})
			return
		}
		retflag = true
	}

	//整数が入力されたかの確認

	page, err := convertUint(c.Query("page"))

	if err != nil {
		c.JSON(400, gin.H{
			"message": fmt.Sprintf("wrong argument type :%s", err),
		})
		return
	}

	sort, err := convertUint(c.Query("sort"))

	if err != nil {
		c.JSON(400, gin.H{
			"message": fmt.Sprintf("wrong argument type :%s", err),
		})
		return
	}

	genreId := c.Query("genreid")

	requestData := rakutenapi.RakutenSearch{
		Keyword_: c.Query("keyword"),
		Page_:    page,
		Sort_:    sort,
	}

	if len(c.Query("keyword")) == 0 && len(c.Query("genreid")) == 0 {
		randflag = true
	} else {
		requestData = rakutenapi.RakutenSearch{
			GenreId_: genreId,
		}
	}

	returnData, err = moldData(rakutenRequest(randflag, requestData, hits))

	for err != nil {
		returnData, err = moldData(rakutenRequest(randflag, requestData, hits))
		fmt.Println(err)
		time.Sleep(time.Second * 1)
	}

	if retflag {
		c.JSON(200, returnData)
	} else {
		c.JSON(200, returnData[0])
	}

}

// データを成形する
func moldData(responseDataChan chan rakutenapi.AutoGenerated) ([]models.ReturnData, error) {
	var returnData []models.ReturnData
	for responseData := range responseDataChan {
		if len(responseData.Items) == 0 {
			return nil, fmt.Errorf("DataNotFound")
		}
		for i := range responseData.Items[0].Item.MediumImageUrls {
			responseData.Items[0].Item.MediumImageUrls[i].ImageURL = strings.ReplaceAll(responseData.Items[0].Item.MediumImageUrls[i].ImageURL, "?_ex=128x128", "")
		}
		r := models.ReturnData{
			Quiz:          responseData.Items[0].Item.ItemName,
			Answer:        responseData.Items[0].Item.ItemPrice,
			Images:        responseData.Items[0].Item.MediumImageUrls,
			AffiliateLink: responseData.Items[0].Item.AffiliateURL,
		}
		if err := db.Maininsert(r); err != nil {
			log.Fatal(err)
		}

		returnData = append(returnData, r)
	}
	return returnData, nil
}

func GetQuizLake(c *gin.Context) {
	var hits int

	if len(c.Query("hits")) == 0 {
		hits = 1
	} else {
		h, err := strconv.Atoi(c.Query("hits"))
		hits = h
		if err != nil {
			c.JSON(400, gin.H{
				"message": fmt.Sprintf("wrong argument type :%s", err),
			})
			return
		}
	}
	data := db.Mainfind(hits)
	c.JSON(200, data)
}

func GetQuiztemp(c *gin.Context) {
	var hits int

	if len(c.Query("hits")) == 0 || len(c.Query("hits")) == 1 {
		hits = 1
		data := db.Mainfind(hits)
		c.JSON(200, data[0])
	} else {
		h, err := strconv.Atoi(c.Query("hits"))
		hits = h
		if err != nil {
			c.JSON(400, gin.H{
				"message": fmt.Sprintf("wrong argument type :%s", err),
			})
			return
		}
		data := db.Mainfind(hits)
		c.JSON(200, data)
	}

}

func GetAll(c *gin.Context) {
	data := db.MainfindAll()
	c.JSON(200, data)
}
